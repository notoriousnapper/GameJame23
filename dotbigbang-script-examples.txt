// In typescript

// Find scripts for pet follow the player, and on collision Enter swipe or something + do damage




    
    // assuming you grab the entity for scale
    start(){
        this.entity.worldTransform.scale.set(1,1,1);
    }
    grow() {
        this.entity.worldTransform.scale.set(3,3,3);
    }
    shrink() {
        this.entity.worldTransform.scale.set(1,1,1);
    }
}



/* 
quick example of choosing a random spawn point and teleporting the local player to it
let spawns = this.game.getEntitiesByTag("spawnpoint")
let spawnPosition = spawns[Random.index(spawns.length)].worldTransform
this.game.playerEntity!.teleport(spawnPosition)
*/

// OBJECT from Obstacle course that throws you forward
class Script extends UserScriptComponent {
    
    impulse:number = 1000;
    
    private _cooldown:number|null = null;

    start() {
        this.entity.tags.add("noplayerparent");
    }

    tick() {
        if (this._cooldown) {
            this._cooldown -= this.game.frameDeltaTime;
            if (this._cooldown <= 0) this._cooldown = null;
        }
    }

    onTriggerStay(other:Entity) {
        if (!other.tags.has('player') || this._cooldown) return;

        this._cooldown = 0.25;
        let impulse = this.entity.worldTransform.getForward().multiplyScalar(this.impulse);
        other.sendEvent('set_impulse', impulse);

        let sfx = this.entity.getComponentByType(ComponentType.Sound);
        if (sfx && sfx.play) sfx.play();
    }
}


// SPAWN Entity from Template
class Script extends UserScriptComponent {
    @description("The number of units away from the last spawn position the Entity must be before it will spawn another Template.")
    @numberRange(1, 100)
    spacing=10;
    @description("The Template to spawn.")
    template = new TemplateRef();

    private _lastSpawnPosition = new Vector3();

    /**
     * start() is called once on game start, or when this Entity is added to a running game.
     */
    start() {
        // Initialize the last spawn position with the Entity's current position.
        this._lastSpawnPosition.copy(this.entity.worldTransform.position);
    } 
    
    /**
     * `tick()` is called once per frame.
     */
    tick() {
        // If no Template is set do nothing.
        let template = this.template.get();
        if (!template) {
            return;
        }

        // Calculate how far we are from the last spawn position.
        const position = this.entity.worldTransform.position;
        const distance = position.distanceTo(this._lastSpawnPosition);

        // Spawn if we have moved enough.
        if (distance >= this.spacing) {
            // Just spawn these for the localk player since everyone will see roughly the same thing.
            const networked = false;
            const transformNetworked = false;

            // Do some math to get exact spawn spacing.
            const spawnPosition = this._lastSpawnPosition.clone().sub(position).setLength(this.spacing).add(this._lastSpawnPosition);

            // Spawn the Template.
            this.game.addEntityFromTemplate(template, networked, transformNetworked, spawnPosition);

            // Store the new spawn position.
            this._lastSpawnPosition.copy(position);
        }
    }
}



// CHANGE HEIGHT OF OBJECT
class Script extends UserScriptComponent {

    private _initialPosition = new Vector3();

    // We start by storing the entity's initial position.
    start(){
        this._initialPosition.set(this.entity.worldTransform.position.x,
                                  this.entity.worldTransform.position.y,
                                  this.entity.worldTransform.position.z);
    }

    // When the "move" event is sent to the entity, it will move the distance we have passed into the function in the y direction.
    move(distance:number){
        this.entity.worldTransform.position.y += distance;
    }

    // When the "resetPosition" event is sent to the entity, it returns back to it's initial position.
    resetPosition(){
        this.entity.worldTransform.position.set(this._initialPosition.x,
                                                this._initialPosition.y,
                                                this._initialPosition.z);
    }
}





// SETUP FOR TAGS (add under "entities" tab and type in tag)
class Script extends UserScriptComponent {

    // The following function will run when the "lightOn" event is sent to this entity.
    lightOn(){
        let obRenderer = this.entity.getComponentByType(ComponentType.VoxelObject);
        if(obRenderer){
            obRenderer.emissive.set('#5463a3');
        }
    }

    // The following function will run when the "lightOff" event is sent to this entity.
    lightOff(){
        let obRenderer = this.entity.getComponentByType(ComponentType.VoxelObject);
        if(obRenderer){
            obRenderer.emissive.set('#000000');
        }
    }

}


// SEND TO TAG TRIGGER
class Script extends UserScriptComponent {

    // This is the name of the tag we will send the event to.
    // We set the tag name in the Entity Panel under "Tag Name"
    // Every entity in the game with this tag on it will recieve the event we send it.
    tagName = "";

    // First we check for when the player collides with the button 
    onCollisionEnter(other:Entity){
        if(other.tags.has('player')){
            // When the player has collided with this button, we send our event to the tag
            // using this.game.sendEventTag, which takes up to three arguments.
            // First you need to provide the tag name, then the name of the event you want to send.
            // If you want to send any arguments with the event, you can add them after the event name.
            this.game.sendEventToTag(this.tagName,'lightOn');

            // Sending an event with arguments would look like this:
            // this.game.sendEventToTag("tag_name","event_name","argument");
        }
    }

    onCollisionExit(other:Entity){
        this.game.sendEventToTag(this.tagName,'lightOff');
    }
}

// UPDATE a UI TEXT BOX 
class Script extends UserScriptComponent {

    start(){
        // Here we get the entity's collision component 
        let collision = this.entity.getComponentByType(ComponentType.Collision);
        // If the entity has a collision component (all entities should!) then we set it's CollisionComponentResponseType 
        // to Trigger
        if(collision) {
            collision.responseType = CollisionComponentResponseType.Trigger;
        }
    }

    // We will make the ghost light up when you trigger it to show visually when you have made a collision.
    onTriggerEnter(other:Entity){
        // We check to make sure that the entity triggering the object is the player
        if(other.tags.has('player')){
            // Once we know the player is the one triggering the ghost, we grab the object's renderer and change the color of its emissive
            let obRenderer = this.entity.getComponentByType(ComponentType.VoxelObject);
            if(obRenderer){
                obRenderer.emissive.set('#5463a3');
            }
            // We send the 'updateUI' event to the tag 'ui', which will send this event to the sign holding the UI code because it is tagged 'ui'
            this.game.sendEventToTag('ui', 'updateUI');
        }
    }

    // ------------- //
    //  The onTriggerExit() function works just like onTriggerEnter(), but runs some code AFTER a trigger stops happening.
    //  In this example, onTriggerEnter() will run when you step into the ghost, and onTriggerExit() will run when you step away from the ghost.
    // ------------- //
    onTriggerExit( other : Entity ){
        // We are check to make sure that the entity triggering the object is the player
        if(other.tags.has('player')){
            // Once we know the player is the one triggering the ghost, we grab the object's renderer again and change back the emissive color to black
            let obRenderer = this.entity.getComponentByType(ComponentType.VoxelObject);
            if(obRenderer){
                obRenderer.emissive.set('#000000');
            }
        }
    }
}

// UI TEXT set to show when you enter room
class Script extends UserScriptComponent {

    //  All text needs a font! We set a Font Reference that we can set in the editor. This will be the font our text will use.
    font = new FontRef();

    // Here we create two new UITextElements, the number of collisions and the text that says "collisions with ghosties"
    private _numCollisionsText : UITextElement | null = null;
    private _ghostieText : UITextElement | null = null;

    // numCollisions will keep track of the amount of times we run into a ghost.
    numCollisions = 0;

    start() {
        // In the start function we will create our text element with game.ui.createTextElement. 
        // This function takes two arguments, the font and the text we want to display.
        this._numCollisionsText = this.game.ui.createTextElement(this.font.get()!, (this.numCollisions).toString());

        // After creating the UI element, we will set it's size and position, and then set it as NOT visible until the player enters this room.
        this._numCollisionsText.setSize(5);
        this._numCollisionsText.setPosition(new Vector2(0.05, 0.05));
        this._numCollisionsText.setVisible(false);

        // We do the same thing for the second UI element. 
        this._ghostieText = this.game.ui.createTextElement(this.font.get()!, "collisions with ghosties");
        this._ghostieText.setSize(1);
        this._ghostieText.setPosition(new Vector2(0.16, 0.05));
        this._ghostieText.setVisible(false);
    } 
    
    // This function is called when the player enters this room.
    // It sets the UI to visible. 
    showUI(){
        if( this._numCollisionsText && this._ghostieText ) {
            this._numCollisionsText.setVisible(true);
            this._ghostieText.setVisible(true);
        }
    }

    // This function is called when the player leaves this room.
    // It sets the UI bacj to invisible.
    hideUI(){
        if( this._numCollisionsText && this._ghostieText ) {
            this._numCollisionsText.setVisible(false);
            this._ghostieText.setVisible(false);
        }
    }

    // This function is called every time we collide with a ghost.
    updateUI(){
        // First we increment the number of collisions.
        this.numCollisions += 1;
        // Then update the text to match the new number of collisions.
        if(this._numCollisionsText) {
            this._numCollisionsText.setText((this.numCollisions).toString());
        }
    }

}
